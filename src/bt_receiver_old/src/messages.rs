// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Command)
pub struct Command {
    // message fields
    // @@protoc_insertion_point(field:Command.teleop)
    pub teleop: ::protobuf::MessageField<command::Teleop>,
    // special fields
    // @@protoc_insertion_point(special_field:Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, command::Teleop>(
            "teleop",
            |m: &Command| { &m.teleop },
            |m: &mut Command| { &mut m.teleop },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.teleop)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.teleop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.teleop.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.teleop.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            teleop: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Command.Teleop)
    pub struct Teleop {
        // message fields
        // @@protoc_insertion_point(field:Command.Teleop.drive_x)
        pub drive_x: f64,
        // @@protoc_insertion_point(field:Command.Teleop.drive_y)
        pub drive_y: f64,
        // @@protoc_insertion_point(field:Command.Teleop.lift)
        pub lift: f64,
        // special fields
        // @@protoc_insertion_point(special_field:Command.Teleop.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Teleop {
        fn default() -> &'a Teleop {
            <Teleop as ::protobuf::Message>::default_instance()
        }
    }

    impl Teleop {
        pub fn new() -> Teleop {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "drive_x",
                |m: &Teleop| { &m.drive_x },
                |m: &mut Teleop| { &mut m.drive_x },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "drive_y",
                |m: &Teleop| { &m.drive_y },
                |m: &mut Teleop| { &mut m.drive_y },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "lift",
                |m: &Teleop| { &m.lift },
                |m: &mut Teleop| { &mut m.lift },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Teleop>(
                "Command.Teleop",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Teleop {
        const NAME: &'static str = "Teleop";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.drive_x = is.read_double()?;
                    },
                    17 => {
                        self.drive_y = is.read_double()?;
                    },
                    33 => {
                        self.lift = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.drive_x != 0. {
                my_size += 1 + 8;
            }
            if self.drive_y != 0. {
                my_size += 1 + 8;
            }
            if self.lift != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.drive_x != 0. {
                os.write_double(1, self.drive_x)?;
            }
            if self.drive_y != 0. {
                os.write_double(2, self.drive_y)?;
            }
            if self.lift != 0. {
                os.write_double(4, self.lift)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Teleop {
            Teleop::new()
        }

        fn clear(&mut self) {
            self.drive_x = 0.;
            self.drive_y = 0.;
            self.lift = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Teleop {
            static instance: Teleop = Teleop {
                drive_x: 0.,
                drive_y: 0.,
                lift: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Teleop {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Command.Teleop").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Teleop {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Teleop {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:Response.system)
    pub system: ::protobuf::MessageField<response::BaseSystem>,
    // @@protoc_insertion_point(field:Response.mag)
    pub mag: ::protobuf::MessageField<response::Mag>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, response::BaseSystem>(
            "system",
            |m: &Response| { &m.system },
            |m: &mut Response| { &mut m.system },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, response::Mag>(
            "mag",
            |m: &Response| { &m.mag },
            |m: &mut Response| { &mut m.mag },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.system)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mag)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.system.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mag.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.system.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.mag.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.system.clear();
        self.mag.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            system: ::protobuf::MessageField::none(),
            mag: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Response.BaseSystem)
    pub struct BaseSystem {
        // message fields
        // @@protoc_insertion_point(field:Response.BaseSystem.battery_voltage)
        pub battery_voltage: f32,
        // special fields
        // @@protoc_insertion_point(special_field:Response.BaseSystem.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a BaseSystem {
        fn default() -> &'a BaseSystem {
            <BaseSystem as ::protobuf::Message>::default_instance()
        }
    }

    impl BaseSystem {
        pub fn new() -> BaseSystem {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "battery_voltage",
                |m: &BaseSystem| { &m.battery_voltage },
                |m: &mut BaseSystem| { &mut m.battery_voltage },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseSystem>(
                "Response.BaseSystem",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for BaseSystem {
        const NAME: &'static str = "BaseSystem";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.battery_voltage = is.read_float()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.battery_voltage != 0. {
                my_size += 1 + 4;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.battery_voltage != 0. {
                os.write_float(1, self.battery_voltage)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> BaseSystem {
            BaseSystem::new()
        }

        fn clear(&mut self) {
            self.battery_voltage = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static BaseSystem {
            static instance: BaseSystem = BaseSystem {
                battery_voltage: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for BaseSystem {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Response.BaseSystem").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for BaseSystem {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for BaseSystem {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:Response.Mag)
    pub struct Mag {
        // message fields
        // @@protoc_insertion_point(field:Response.Mag.stamp)
        pub stamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
        // @@protoc_insertion_point(field:Response.Mag.array)
        pub array: ::std::vec::Vec<mag::Measurement>,
        // @@protoc_insertion_point(field:Response.Mag.lift)
        pub lift: ::protobuf::MessageField<mag::Measurement>,
        // special fields
        // @@protoc_insertion_point(special_field:Response.Mag.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Mag {
        fn default() -> &'a Mag {
            <Mag as ::protobuf::Message>::default_instance()
        }
    }

    impl Mag {
        pub fn new() -> Mag {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
                "stamp",
                |m: &Mag| { &m.stamp },
                |m: &mut Mag| { &mut m.stamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "array",
                |m: &Mag| { &m.array },
                |m: &mut Mag| { &mut m.array },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, mag::Measurement>(
                "lift",
                |m: &Mag| { &m.lift },
                |m: &mut Mag| { &mut m.lift },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Mag>(
                "Response.Mag",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Mag {
        const NAME: &'static str = "Mag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.stamp)?;
                    },
                    18 => {
                        self.array.push(is.read_message()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.lift)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.stamp.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.array {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if let Some(v) = self.lift.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.stamp.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.array {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            if let Some(v) = self.lift.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Mag {
            Mag::new()
        }

        fn clear(&mut self) {
            self.stamp.clear();
            self.array.clear();
            self.lift.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Mag {
            static instance: Mag = Mag {
                stamp: ::protobuf::MessageField::none(),
                array: ::std::vec::Vec::new(),
                lift: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Mag {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Response.Mag").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Mag {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Mag {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Mag`
    pub mod mag {
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:Response.Mag.Measurement)
        pub struct Measurement {
            // message fields
            // @@protoc_insertion_point(field:Response.Mag.Measurement.x)
            pub x: f64,
            // @@protoc_insertion_point(field:Response.Mag.Measurement.y)
            pub y: f64,
            // @@protoc_insertion_point(field:Response.Mag.Measurement.z)
            pub z: f64,
            // special fields
            // @@protoc_insertion_point(special_field:Response.Mag.Measurement.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Measurement {
            fn default() -> &'a Measurement {
                <Measurement as ::protobuf::Message>::default_instance()
            }
        }

        impl Measurement {
            pub fn new() -> Measurement {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "x",
                    |m: &Measurement| { &m.x },
                    |m: &mut Measurement| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "y",
                    |m: &Measurement| { &m.y },
                    |m: &mut Measurement| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "z",
                    |m: &Measurement| { &m.z },
                    |m: &mut Measurement| { &mut m.z },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Measurement>(
                    "Response.Mag.Measurement",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Measurement {
            const NAME: &'static str = "Measurement";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        9 => {
                            self.x = is.read_double()?;
                        },
                        17 => {
                            self.y = is.read_double()?;
                        },
                        25 => {
                            self.z = is.read_double()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.x != 0. {
                    my_size += 1 + 8;
                }
                if self.y != 0. {
                    my_size += 1 + 8;
                }
                if self.z != 0. {
                    my_size += 1 + 8;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.x != 0. {
                    os.write_double(1, self.x)?;
                }
                if self.y != 0. {
                    os.write_double(2, self.y)?;
                }
                if self.z != 0. {
                    os.write_double(3, self.z)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Measurement {
                Measurement::new()
            }

            fn clear(&mut self) {
                self.x = 0.;
                self.y = 0.;
                self.z = 0.;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Measurement {
                static instance: Measurement = Measurement {
                    x: 0.,
                    y: 0.,
                    z: 0.,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Measurement {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Response.Mag.Measurement").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Measurement {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Measurement {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x82\x01\n\
    \x07Command\x12'\n\x06teleop\x18\x01\x20\x01(\x0b2\x0f.Command.TeleopR\
    \x06teleop\x1aN\n\x06Teleop\x12\x17\n\x07drive_x\x18\x01\x20\x01(\x01R\
    \x06driveX\x12\x17\n\x07drive_y\x18\x02\x20\x01(\x01R\x06driveY\x12\x12\
    \n\x04lift\x18\x04\x20\x01(\x01R\x04lift\"\xe3\x02\n\x08Response\x12,\n\
    \x06system\x18\x01\x20\x01(\x0b2\x14.Response.BaseSystemR\x06system\x12\
    \x1f\n\x03mag\x18\x02\x20\x01(\x0b2\r.Response.MagR\x03mag\x1a5\n\nBaseS\
    ystem\x12'\n\x0fbattery_voltage\x18\x01\x20\x01(\x02R\x0ebatteryVoltage\
    \x1a\xd0\x01\n\x03Mag\x120\n\x05stamp\x18\x01\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\x05stamp\x12/\n\x05array\x18\x02\x20\x03(\x0b2\x19.Re\
    sponse.Mag.MeasurementR\x05array\x12-\n\x04lift\x18\x03\x20\x01(\x0b2\
    \x19.Response.Mag.MeasurementR\x04lift\x1a7\n\x0bMeasurement\x12\x0c\n\
    \x01x\x18\x01\x20\x01(\x01R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x01R\
    \x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x01R\x01zJ\x84\x08\n\x06\x12\x04\0\
    \0\x1e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\
    )\n\n\n\x02\x04\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\
    \x08\x0f\n\x0c\n\x04\x04\0\x03\0\x12\x04\x05\x02\t\x03\n\x0c\n\x05\x04\0\
    \x03\0\x01\x12\x03\x05\n\x10\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x06\x04\
    \x17\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x06\x04\n\n\x0e\n\x07\x04\
    \0\x03\0\x02\0\x01\x12\x03\x06\x0b\x12\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\
    \x12\x03\x06\x15\x16\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x07\x04\x17\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x07\x04\n\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x01\x12\x03\x07\x0b\x12\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x03\x12\x03\x07\x15\x16\n\r\n\x06\x04\0\x03\0\x02\x02\x12\x03\x08\x04\
    \x14\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0e\n\x07\
    \x04\0\x03\0\x02\x02\x01\x12\x03\x08\x0b\x0f\n\x0e\n\x07\x04\0\x03\0\x02\
    \x02\x03\x12\x03\x08\x12\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x14\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\n\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x12\x13\n\n\n\x02\
    \x04\x01\x12\x04\x0e\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x10\
    \n\x0c\n\x04\x04\x01\x03\0\x12\x04\x0f\x02\x11\x03\n\x0c\n\x05\x04\x01\
    \x03\0\x01\x12\x03\x0f\n\x14\n\r\n\x06\x04\x01\x03\0\x02\0\x12\x03\x10\
    \x04\x1e\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03\x10\x04\t\n\x0e\n\
    \x07\x04\x01\x03\0\x02\0\x01\x12\x03\x10\n\x19\n\x0e\n\x07\x04\x01\x03\0\
    \x02\0\x03\x12\x03\x10\x1c\x1d\n\x0c\n\x04\x04\x01\x03\x01\x12\x04\x12\
    \x02\x1b\x03\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03\x12\n\r\n\x0e\n\x06\
    \x04\x01\x03\x01\x03\0\x12\x04\x13\x04\x17\x05\n\x0e\n\x07\x04\x01\x03\
    \x01\x03\0\x01\x12\x03\x13\x0c\x17\n\x0f\n\x08\x04\x01\x03\x01\x03\0\x02\
    \0\x12\x03\x14\x06\x13\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\0\x05\x12\x03\
    \x14\x06\x0c\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\0\x01\x12\x03\x14\r\x0e\
    \n\x10\n\t\x04\x01\x03\x01\x03\0\x02\0\x03\x12\x03\x14\x11\x12\n\x0f\n\
    \x08\x04\x01\x03\x01\x03\0\x02\x01\x12\x03\x15\x06\x13\n\x10\n\t\x04\x01\
    \x03\x01\x03\0\x02\x01\x05\x12\x03\x15\x06\x0c\n\x10\n\t\x04\x01\x03\x01\
    \x03\0\x02\x01\x01\x12\x03\x15\r\x0e\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\
    \x01\x03\x12\x03\x15\x11\x12\n\x0f\n\x08\x04\x01\x03\x01\x03\0\x02\x02\
    \x12\x03\x16\x06\x13\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\x02\x05\x12\x03\
    \x16\x06\x0c\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\x02\x01\x12\x03\x16\r\
    \x0e\n\x10\n\t\x04\x01\x03\x01\x03\0\x02\x02\x03\x12\x03\x16\x11\x12\n\r\
    \n\x06\x04\x01\x03\x01\x02\0\x12\x03\x18\x04(\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\0\x06\x12\x03\x18\x04\x1d\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\
    \x12\x03\x18\x1e#\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x03\x18&'\n\
    \r\n\x06\x04\x01\x03\x01\x02\x01\x12\x03\x19\x04#\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x01\x04\x12\x03\x19\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x01\x06\x12\x03\x19\r\x18\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x01\x12\
    \x03\x19\x19\x1e\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x03\x12\x03\x19!\"\
    \n\r\n\x06\x04\x01\x03\x01\x02\x02\x12\x03\x1a\x04\x19\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x02\x06\x12\x03\x1a\x04\x0f\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x02\x01\x12\x03\x1a\x10\x14\n\x0e\n\x07\x04\x01\x03\x01\x02\x02\x03\
    \x12\x03\x1a\x17\x18\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1c\x02\x18\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x03\x1c\x02\x0c\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x1c\r\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1c\x16\x17\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1d\x02\x0e\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03\x1d\x02\x05\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1d\
    \x06\t\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1d\x0c\rb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Command::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(command::Teleop::generated_message_descriptor_data());
            messages.push(response::BaseSystem::generated_message_descriptor_data());
            messages.push(response::Mag::generated_message_descriptor_data());
            messages.push(response::mag::Measurement::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
